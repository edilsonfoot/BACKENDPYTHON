fam√≠lia = ["Edilson", "Elis√¢ngela", "Lav√≠nia", "Luiz"]
#              0          1             2         3
#             -4         -3            -2        -1

#print(fam√≠lia[3])     - retorna um indice
#print(fam√≠lia[-3])    - retorna um indice de traz pra frente
#print(fam√≠lia[2:])    - retorna a partir do indice 2
#print(fam√≠lia[2:3])   -retorna a partir do indice 2 at√© 3, excluindo o 3

print(fam√≠lia)
fam√≠lia[3] = "Edilson"                #trocou o nome Luiz por Edilson
print(fam√≠lia)

fam√≠lia.extend(["Eraldo", "La√≠de"])   #acrescentou os nomes Eraldo e La√≠de, sempre no final
print(fam√≠lia)

fam√≠lia.insert(1, "Balula")           #insere uma pessoa na posi√ß√£o escolhida
print(fam√≠lia)

fam√≠lia.pop()                          #remove o √∫ltimo nome
print(fam√≠lia)

fam√≠lia.remove("Eraldo")               #remove o nome escolhido

print(fam√≠lia)

fam√≠lia.clear()

fam√≠lia = ["Edilson", "Elis√¢ngela", "Lav√≠nia", "Luiz"]
print(fam√≠lia)

idade_fam√≠lia = [53, 50, 22, 13]
print(idade_fam√≠lia)
idade_fam√≠lia.sort()
print(idade_fam√≠lia)

idade_fam√≠lia.reverse()
print(idade_fam√≠lia)


#copiar uma nova familia, apatir da atual (c√≥pia)
fam√≠lia2 = fam√≠lia()

#remover um elemento
fam√≠lia.remove("Edilson")
print(fam√≠lia)

'''
Fun√ß√£o id() em Python
A fun√ß√£o id() em Python √© usada para retornar a identidade √∫nica de um objeto. Essa identidade √© representada por um n√∫mero inteiro que corresponde ao endere√ßo de mem√≥ria onde o objeto est√° armazenado (embora o valor exato dependa da implementa√ß√£o do Python).
Caracter√≠sticas principais:

O valor retornado por id() permanece constante durante toda a vida √∫til do objeto.
√â √∫til para verificar se dois objetos s√£o, de fato, o mesmo (compartilham o mesmo espa√ßo na mem√≥ria).

Exemplo de uso:
a = [1, 2, 3]
b = a
c = [1, 2, 3]

print(id(a))  # Exibe o ID de 'a'
print(id(b))  # Mesmo ID de 'a', pois 'b' √© uma refer√™ncia a 'a'
print(id(c))  # Diferente, pois 'c' √© um novo objeto com o mesmo conte√∫do

# Verificando se s√£o o mesmo objeto
print(a is b)  # True
print(a is c)  # False

Quando usar id()?

Para depura√ß√£o, quando voc√™ precisa entender como objetos est√£o sendo manipulados na mem√≥ria.
Para confirmar se duas vari√°veis apontam para o mesmo objeto.

Se precisar de mais exemplos ou explica√ß√µes, √© s√≥ avisar! üòä
'''
#Multiplicando elementos de uma lista
nova_lista = [5, 4, 3]
resultado = [x * 5 for x in nova_lista]
print(resultado)

'''
5) Use o slice para criar uma nova lista que inclua apenas os elementos com √≠ndice 
3 e 4 da lista a seguir: 
[ 1,2,3,4,5,6 ]  

resultado esperado: [4,5]
'''

#M√âTODO SLICE

lista = [ 1,2,3,4,5,6 ]          #slice voc√™ precisa digitar um indice maior parar obter o anterior, se vc que quer como resultado (3,4))
fatiamento = slice(3, 5)         #deve digitar (3,5)
resultado = lista[fatiamento]
print(resultado)








      

















